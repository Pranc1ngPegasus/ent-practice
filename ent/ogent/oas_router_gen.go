// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts/"
				if l := len("accounts/"); len(elem) >= l && elem[0:l] == "accounts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteAccount
					s.handleDeleteAccountRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'o': // Prefix: "organizations/"
				if l := len("organizations/"); len(elem) >= l && elem[0:l] == "organizations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteOrganization
					s.handleDeleteOrganizationRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts"
				if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListAccountRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: ReadAccount
						s.handleReadAccountRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			case 'o': // Prefix: "organizations"
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListOrganizationRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: ReadOrganization
						s.handleReadOrganizationRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts/"
				if l := len("accounts/"); len(elem) >= l && elem[0:l] == "accounts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateAccount
					s.handleUpdateAccountRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'o': // Prefix: "organizations/"
				if l := len("organizations/"); len(elem) >= l && elem[0:l] == "organizations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateOrganization
					s.handleUpdateOrganizationRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts"
				if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateAccount
					s.handleCreateAccountRequest([0]string{}, w, r)

					return
				}
			case 'o': // Prefix: "organizations"
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateOrganization
					s.handleCreateOrganizationRequest([0]string{}, w, r)

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [1]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts/"
				if l := len("accounts/"); len(elem) >= l && elem[0:l] == "accounts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteAccount
					r.name = "DeleteAccount"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'o': // Prefix: "organizations/"
				if l := len("organizations/"); len(elem) >= l && elem[0:l] == "organizations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteOrganization
					r.name = "DeleteOrganization"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts"
				if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListAccount"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: ReadAccount
						r.name = "ReadAccount"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			case 'o': // Prefix: "organizations"
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListOrganization"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: ReadOrganization
						r.name = "ReadOrganization"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts/"
				if l := len("accounts/"); len(elem) >= l && elem[0:l] == "accounts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateAccount
					r.name = "UpdateAccount"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'o': // Prefix: "organizations/"
				if l := len("organizations/"); len(elem) >= l && elem[0:l] == "organizations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateOrganization
					r.name = "UpdateOrganization"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "accounts"
				if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateAccount
					r.name = "CreateAccount"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'o': // Prefix: "organizations"
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateOrganization
					r.name = "CreateOrganization"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	}
	return r, false
}
