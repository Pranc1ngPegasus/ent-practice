// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"

	"go.opentelemetry.io/otel/metric/instrument/syncint64"

	"github.com/ogen-go/ogen/otelogen"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateAccount implements createAccount operation.
	//
	// Creates a new Account and persists it to storage.
	//
	// POST /accounts
	CreateAccount(ctx context.Context, req CreateAccountReq) (CreateAccountRes, error)
	// CreateOrganization implements createOrganization operation.
	//
	// Creates a new Organization and persists it to storage.
	//
	// POST /organizations
	CreateOrganization(ctx context.Context, req CreateOrganizationReq) (CreateOrganizationRes, error)
	// DeleteAccount implements deleteAccount operation.
	//
	// Deletes the Account with the requested ID.
	//
	// DELETE /accounts/{id}
	DeleteAccount(ctx context.Context, params DeleteAccountParams) (DeleteAccountRes, error)
	// DeleteOrganization implements deleteOrganization operation.
	//
	// Deletes the Organization with the requested ID.
	//
	// DELETE /organizations/{id}
	DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (DeleteOrganizationRes, error)
	// ListAccount implements listAccount operation.
	//
	// List Accounts.
	//
	// GET /accounts
	ListAccount(ctx context.Context, params ListAccountParams) (ListAccountRes, error)
	// ListOrganization implements listOrganization operation.
	//
	// List Organizations.
	//
	// GET /organizations
	ListOrganization(ctx context.Context, params ListOrganizationParams) (ListOrganizationRes, error)
	// ReadAccount implements readAccount operation.
	//
	// Finds the Account with the requested ID and returns it.
	//
	// GET /accounts/{id}
	ReadAccount(ctx context.Context, params ReadAccountParams) (ReadAccountRes, error)
	// ReadOrganization implements readOrganization operation.
	//
	// Finds the Organization with the requested ID and returns it.
	//
	// GET /organizations/{id}
	ReadOrganization(ctx context.Context, params ReadOrganizationParams) (ReadOrganizationRes, error)
	// UpdateAccount implements updateAccount operation.
	//
	// Updates a Account and persists changes to storage.
	//
	// PATCH /accounts/{id}
	UpdateAccount(ctx context.Context, req UpdateAccountReq, params UpdateAccountParams) (UpdateAccountRes, error)
	// UpdateOrganization implements updateOrganization operation.
	//
	// Updates a Organization and persists changes to storage.
	//
	// PATCH /organizations/{id}
	UpdateOrganization(ctx context.Context, req UpdateOrganizationReq, params UpdateOrganizationParams) (UpdateOrganizationRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	cfg config

	requests syncint64.Counter
	errors   syncint64.Counter
	duration syncint64.Histogram
}

func NewServer(h Handler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.SyncInt64().Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
