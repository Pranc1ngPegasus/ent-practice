// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/Pranc1ngPegasus/ent-practice/ent"

func NewAccountCreate(e *ent.Account) *AccountCreate {
	if e == nil {
		return nil
	}
	var ret AccountCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewAccountCreates(es []*ent.Account) []AccountCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccountCreate, len(es))
	for i, e := range es {
		r[i] = NewAccountCreate(e).Elem()
	}
	return r
}

func (a *AccountCreate) Elem() AccountCreate {
	if a == nil {
		return AccountCreate{}
	}
	return *a
}

func NewAccountList(e *ent.Account) *AccountList {
	if e == nil {
		return nil
	}
	var ret AccountList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewAccountLists(es []*ent.Account) []AccountList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccountList, len(es))
	for i, e := range es {
		r[i] = NewAccountList(e).Elem()
	}
	return r
}

func (a *AccountList) Elem() AccountList {
	if a == nil {
		return AccountList{}
	}
	return *a
}

func NewAccountRead(e *ent.Account) *AccountRead {
	if e == nil {
		return nil
	}
	var ret AccountRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewAccountReads(es []*ent.Account) []AccountRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccountRead, len(es))
	for i, e := range es {
		r[i] = NewAccountRead(e).Elem()
	}
	return r
}

func (a *AccountRead) Elem() AccountRead {
	if a == nil {
		return AccountRead{}
	}
	return *a
}

func NewAccountUpdate(e *ent.Account) *AccountUpdate {
	if e == nil {
		return nil
	}
	var ret AccountUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewAccountUpdates(es []*ent.Account) []AccountUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccountUpdate, len(es))
	for i, e := range es {
		r[i] = NewAccountUpdate(e).Elem()
	}
	return r
}

func (a *AccountUpdate) Elem() AccountUpdate {
	if a == nil {
		return AccountUpdate{}
	}
	return *a
}

func NewOrganizationCreate(e *ent.Organization) *OrganizationCreate {
	if e == nil {
		return nil
	}
	var ret OrganizationCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewOrganizationCreates(es []*ent.Organization) []OrganizationCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationCreate, len(es))
	for i, e := range es {
		r[i] = NewOrganizationCreate(e).Elem()
	}
	return r
}

func (o *OrganizationCreate) Elem() OrganizationCreate {
	if o == nil {
		return OrganizationCreate{}
	}
	return *o
}

func NewOrganizationList(e *ent.Organization) *OrganizationList {
	if e == nil {
		return nil
	}
	var ret OrganizationList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewOrganizationLists(es []*ent.Organization) []OrganizationList {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationList, len(es))
	for i, e := range es {
		r[i] = NewOrganizationList(e).Elem()
	}
	return r
}

func (o *OrganizationList) Elem() OrganizationList {
	if o == nil {
		return OrganizationList{}
	}
	return *o
}

func NewOrganizationRead(e *ent.Organization) *OrganizationRead {
	if e == nil {
		return nil
	}
	var ret OrganizationRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewOrganizationReads(es []*ent.Organization) []OrganizationRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationRead, len(es))
	for i, e := range es {
		r[i] = NewOrganizationRead(e).Elem()
	}
	return r
}

func (o *OrganizationRead) Elem() OrganizationRead {
	if o == nil {
		return OrganizationRead{}
	}
	return *o
}

func NewOrganizationUpdate(e *ent.Organization) *OrganizationUpdate {
	if e == nil {
		return nil
	}
	var ret OrganizationUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	ret.DeletedAt = OptDateTime{}
	if e.DeletedAt != nil {
		ret.DeletedAt.SetTo(*e.DeletedAt)
	}
	return &ret
}

func NewOrganizationUpdates(es []*ent.Organization) []OrganizationUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationUpdate, len(es))
	for i, e := range es {
		r[i] = NewOrganizationUpdate(e).Elem()
	}
	return r
}

func (o *OrganizationUpdate) Elem() OrganizationUpdate {
	if o == nil {
		return OrganizationUpdate{}
	}
	return *o
}
