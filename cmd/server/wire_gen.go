// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Pranc1ngPegasus/ent-practice/adapter/configuration"
	"github.com/Pranc1ngPegasus/ent-practice/adapter/logger"
	"github.com/Pranc1ngPegasus/ent-practice/adapter/persistence"
	"github.com/Pranc1ngPegasus/ent-practice/adapter/server"
	"github.com/Pranc1ngPegasus/ent-practice/ent"
	"go.uber.org/zap"
	"net/http"
)

// Injectors from wire.go:

func initialize() (*app, error) {
	zapLogger, err := logger.NewLogger()
	if err != nil {
		return nil, err
	}
	config, err := configuration.Get(zapLogger)
	if err != nil {
		return nil, err
	}
	database := config.Database
	client, err := persistence.NewRDBConnector(zapLogger, database)
	if err != nil {
		return nil, err
	}
	configurationServer := config.Server
	httpServer, err := server.NewServer(zapLogger, configurationServer, client)
	if err != nil {
		return nil, err
	}
	mainApp := &app{
		logger: zapLogger,
		dbConn: client,
		server: httpServer,
	}
	return mainApp, nil
}

// wire.go:

type app struct {
	logger *zap.Logger
	dbConn *ent.Client
	server *http.Server
}
